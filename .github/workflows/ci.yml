name: C CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'       # Trigger CD on version tags like v1.0.0
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install dependencies (GCC + Make)
      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: üß© Install static analysis tools
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      - name: üß© Install mem analysis tools
        run: sudo apt-get update && sudo apt-get install -y valgrind
        
      - name: Install coverage tools
        run: sudo apt-get update && sudo apt-get install -y lcov

      # 3Ô∏è‚É£ Build project
      - name: Build project
        run: make all

      - name: Create Git tag
        run: |
          VERSION="v$(date +%Y.%m.%d.%H%M)"
          git tag $VERSION
          git push origin $VERSION

      - name: üîç Static Analysis (cppcheck)
        run: make lint

      - name: Upload Static Analysis results
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: reports/cppcheck-report.txt

      # 4Ô∏è‚É£ Run unit tests
      - name: Run unit tests
        run: make check

      - name: Run memcheck
        run: make memcheck

      - name: Run tests with coverage
        run: make coverage-html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Generate dummy JUnit report
        run: make debug-junit
      
      # 5Ô∏è‚É£ Publish JUnit test results
      - name: Publish JUnit test results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: test-reports/test_results.xml
          include_passed: true
          fail_on_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: test-reports/test_results.xml

      # 5Ô∏è‚É£ Run functional/system tests
      - name: Run functional tests
        run: make functional

      # 6Ô∏è‚É£ Full distribution check (build tarball, test from scratch)
      - name: Run distribution check
        run: make distcheck

      # 7Ô∏è‚É£ Upload the .tar.gz source archive as a build artifact
      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: hello-dist
          path: dist/*.tar.gz

  release:
      runs-on: ubuntu-latest
      needs: build
      #if: startsWith(github.ref, 'refs/tags/')
      steps:
      - name: üßæ Checkout source
        uses: actions/checkout@v4

      - name: üì¶ Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: hello-dist
          path: dist

      - name: üöÄ Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
